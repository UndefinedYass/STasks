<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:STasks.View"
             xmlns:ViewModel="clr-namespace:STasks.ViewModel"
    xmlns:attached="clr-namespace:STasks.View.Attached"
             xmlns:Converters="clr-namespace:Converters" x:Name="userControl" x:Class="STasks.View.ExerciseView"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance {x:Type ViewModel:ExerciseViewModel}, IsDesignTimeCreatable=True}"
             d:DesignHeight="300" d:DesignWidth="300" SnapsToDevicePixels="True" TextOptions.TextFormattingMode="Display" UseLayoutRounding="True">
    <UserControl.Resources>
        <Converters:BooleanToVisibilityInverted x:Key="BooleanToVisibilityInverted"/>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <DataTemplate x:Key="AddMultipleTasksDialogViewModelTemplate" DataType="{x:Type ViewModel:AddMultipleTasksDialogViewModel}">
            <StackPanel Margin="16">
                <TextBlock Text="Count:"/>
                <TextBox Margin="0 8 0 0" Text="{Binding Count}"/>
                <Button
                        Margin="0 8 0 0"
                        IsDefault="True"
                        Command="{Binding AddCommand}"
                        Style="{DynamicResource MaterialDesignFlatButton}"
                        Content="Add"/>
            </StackPanel>
        </DataTemplate>

        <Style x:Key="CheckBoxStyle1" TargetType="{x:Type CheckBox}">
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
            <Setter Property="Foreground" Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type FrameworkElement}}}"/>
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate/>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="Click">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="InteractionEllipse">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="InteractionEllipse">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="InteractionEllipse">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="InteractionEllipse">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InteractionEllipse">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Viewbox FlowDirection="LeftToRight" Height="{Binding (materialDesign:CheckBoxAssist.CheckBoxSize), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="{Binding (materialDesign:CheckBoxAssist.CheckBoxSize), RelativeSource={RelativeSource TemplatedParent}}">
                                <Canvas Height="24" Width="24">
                                    <Path x:Name="Graphic" Data="M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3 M19,5L19,19 5,19 5,5 19,5z" Fill="{DynamicResource MaterialDesignCheckBoxOff}"/>
                                    <Ellipse x:Name="InteractionEllipse" Fill="{TemplateBinding Foreground}" Height="0" IsHitTestVisible="False" Canvas.Left="12" Opacity="0" RenderTransformOrigin="0.5,0.5" Canvas.Top="12" Width="0">
                                        <Ellipse.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Ellipse.RenderTransform>
                                    </Ellipse>
                                </Canvas>
                            </Viewbox>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding (materialDesign:RippleAssist.IsDisabled), RelativeSource={RelativeSource Self}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InteractionEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiDataTrigger.EnterActions>
                            </MultiDataTrigger>
                            <Trigger Property="HasContent" Value="True">
                                <Setter Property="FocusVisualStyle">
                                    <Setter.Value>
                                        <Style>
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Padding" Value="4,2,0,0"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Data" TargetName="Graphic" Value="M10,17L5,12 6.41,10.58 10,14.17 17.59,6.58 19,8 M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3z"/>
                                <Setter Property="Fill" TargetName="Graphic" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Fill" TargetName="Graphic" Value="{DynamicResource MaterialDesignCheckBoxDisabled}"/>
                                <Setter Property="Opacity" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter Property="Data" TargetName="Graphic" Value="M6,13L6,11 18,11 18,13 M19,3L5,3C3.89,3,3,3.89,3,5L3,19A2,2,0,0,0,5,21L19,21A2,2,0,0,0,21,19L21,5C21,3.89,20.1,3,19,3z"/>
                                <Setter Property="Fill" TargetName="Graphic" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Trigger>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="Fill" TargetName="Graphic" Value="{DynamicResource MaterialDesignValidationErrorBrush}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource MaterialDesignValidationErrorBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid  >
        <materialDesign:DialogHost
            DialogContentTemplate="{StaticResource AddMultipleTasksDialogViewModelTemplate}"
            IsOpen="{Binding IsDialogOpen}"
            CloseOnClickAway="True"
            DialogContent="{Binding  CurrentDialogContent}"
            >
           

            <Expander   materialDesign:ExpanderAssist.HeaderFontSize="11" materialDesign:ExpanderAssist.HorizontalHeaderPadding="4" materialDesign:ExpanderAssist.VerticalHeaderPadding="6" TextOptions.TextFormattingMode="Display" IsExpanded="{Binding IsExpanded, Mode=TwoWay}" HorizontalContentAlignment="Stretch"  >
                <Expander.Header>

                    <Grid Focusable="True"  Background="Transparent" attached:BindKeyToCommand.SetKeyboardFocusOnMouseClick="true"  attached:BindKeyToCommand.Key="F2" attached:BindKeyToCommand.Command="{Binding RenameCommand}" Height="20">
                        <Grid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Rename" Command="{Binding RenameCommand}"/>
                                <MenuItem Header="Add task" Command="{Binding AddTaskCommand}"/>
                                <MenuItem Header="Add tasks" Command="{ Binding OpenDialogCommand}" CommandParameter="{Binding AddMultipleTasksDialogViewModelInstance}">
                                    <!--MenuItem.CommandParameter>
                                        <Grid  Width="160">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="100"/>
                                                <RowDefinition Height="44"/>
                                                
                                            </Grid.RowDefinitions>
                                            <StackPanel Orientation="Horizontal" Height="44">
                                                <TextBlock Text="Count:" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="4,0"/>
                                                <TextBox x:Name="TasksCountToAddTB" Text="1" VerticalAlignment="Center" Margin="4,0,6,0"/>
                                            </StackPanel>
                                            <Button Grid.Row="1" Content="Add" VerticalAlignment="Center" Command="{Binding AddTasksCommand}" CommandParameter="{Binding Text, ElementName=TasksCountToAddTB}" HorizontalAlignment="Right" Margin="0,0,10,0"/>
                                        </Grid>
                                    </-->
                                    
                                </MenuItem>
                                <MenuItem Header="Clear tasks" Command="{Binding ClearTasksCommand}"/>

                                <MenuItem Header="Delete" Command="{Binding DeleteCommand}"  />

                            </ContextMenu>
                        </Grid.ContextMenu>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="24"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock     Foreground="{DynamicResource MaterialDesignBody}" x:Name="textBlock" TextWrapping="Wrap" Text="{Binding Title}" HorizontalAlignment="Left" VerticalAlignment="Center" TextOptions.TextFormattingMode="Display" SnapsToDevicePixels="True" FontWeight="Bold" FontSize="13.333" Margin="0,0,6,0" Visibility="{Binding IsRenaming, Converter={StaticResource BooleanToVisibilityInverted}}" />
                        <TextBox  materialDesign:TextFieldAssist.TextBoxViewMargin="0 0 2 0" attached:TextBoxProperties.InvokeLostFocusOrEnterCallback="True"  Foreground="{DynamicResource MaterialDesignBody}" x:Name="RenamingTextBox" TextWrapping="Wrap" Text="{Binding RenamingName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" VerticalAlignment="Center" TextOptions.TextFormattingMode="Display" attached:TextBoxProperties.IsAllSelected="{Binding IsRenaming, Mode=OneWay}" SnapsToDevicePixels="True" FontWeight="Bold" FontSize="13.333" Margin="0,0,6,0" Visibility="{Binding IsRenaming, Converter={StaticResource BooleanToVisibilityConverter}}" Padding="0,0,2,0" VerticalContentAlignment="Center"/>
                        <ProgressBar  Style="{StaticResource MaterialDesignCircularProgressBar}"   Value="{Binding DiscretProgressAsFloat, Mode=OneWay}" Visibility="Collapsed" Height="Auto" Width="Auto" Grid.Column="2"/>
                        <materialDesign:PackIcon Kind="CheckBold" Width="16" Height="16" Foreground="#FF0ABF00" VerticalAlignment="Center" Visibility="{Binding  IsDoneVisible, Converter={StaticResource BooleanToVisibilityConverter}}" HorizontalAlignment="Center" Grid.Column="2"/>
                        <CheckBox IsChecked="{Binding IsAccomplished}" Visibility="Collapsed" Grid.Column="1" />
                    </Grid>
                </Expander.Header>
                <Grid>
                    <ListBox materialDesign:ListBoxItemAssist.CornerRadius="0"  materialDesign:TransitionAssist.DisableTransitions="True"  ItemsSource="{Binding TasksVMS}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"  Padding="0" Margin="0">
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MaterialDesignListBoxItem}">
                                <Setter Property="Padding" Value="0"/>

                            </Style>
                        </ListBox.ItemContainerStyle>

                        <ListBox.ItemTemplate>
                            <DataTemplate DataType="ViewModel:TaskViewModel" >
                                <Grid attached:BindKeyToCommand.Key="F2" attached:BindKeyToCommand.Command="{Binding RenameCommand}" attached:BindKeyToCommand.SetKeyboardFocusOnMouseClick="True" >
                                    <CheckBox   materialDesign:CheckBoxAssist.CheckBoxSize="16"    IsChecked="{Binding IsAccomplished}" BorderBrush="#FFBB0606" VerticalContentAlignment="Center" Padding="6,0,0,0" UseLayoutRounding="True" HorizontalContentAlignment="Stretch"   FontSize="13.333" Height="24" Margin="4,0,0,0">
                                        <Grid >
                                            <TextBlock  Text="{Binding Title}" Visibility="{Binding IsRenaming, Converter={StaticResource BooleanToVisibilityInverted}}" VerticalAlignment="Center" ></TextBlock>
                                            <TextBox attached:TextBoxProperties.InvokeLostFocusOrEnterCallback="True" attached:TextBoxProperties.IsAllSelected="{Binding IsRenaming}" materialDesign:TextFieldAssist.TextBoxViewMargin="0 0 2 0" Text="{Binding RenamingName}" Visibility="{Binding IsRenaming, Converter={StaticResource BooleanToVisibilityConverter}}" VerticalAlignment="Center" ></TextBox>


                                        </Grid>
                                    </CheckBox>

                                </Grid>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </Grid>
            </Expander>

        </materialDesign:DialogHost>
       
    </Grid>
</UserControl>
